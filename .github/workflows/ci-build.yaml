#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Camel Quarkus CI

on:
  push:
    branches:
      - main
      - ci-testing
    paths-ignore:
      - '**.adoc'
      - 'Jenkinsfile'
      - 'KEYS'
      - 'LICENSE.txt'
      - 'NOTICE.txt'
  pull_request:
    branches:
      - main
      - ci-testing
    paths-ignore:
      - '**.adoc'
      - 'Jenkinsfile'
      - 'KEYS'
      - 'LICENSE.txt'
      - 'NOTICE.txt'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  LANG: en_US.UTF-8
  MAVEN_OPTS: -Xmx3000m
  MAVEN_ARGS: -V -ntp -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -e
  TESTCONTAINERS_RYUK_DISABLED: true

jobs:
  initial-mvn-install:
    if: github.repository == 'jamesnetherton/camel-quarkus-examples'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-itest-matrix.outputs.matrix }}
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Camel Quarkus Examples
        run: |
          ./mvnw-for-each.sh ${MAVEN_ARGS} clean install -DskipTests -Dquarkus.build.skip
      - name: Tar Maven Repo
        shell: bash
        run: |
          tar -czf ${{ runner.temp }}/maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v2
        with:
          name: maven-repo
          path: ${{ runner.temp }}/maven-repo.tgz
          retention-days: 1
      - name: Setup Integration Test Matrix
        id: set-itest-matrix
        run: |
          sudo apt install groovy -y --no-install-recommends
          TEST_GROUPS=$(groovy .github/generate-test-groups.groovy)
          echo ${TEST_GROUPS} | jq
          echo "::set-output name=matrix::${TEST_GROUPS}"

  integration-tests:
    name: Integration Tests - ${{matrix.name}}
    needs: initial-mvn-install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.initial-mvn-install.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Download Maven Repo
        uses: actions/download-artifact@v2
        with:
          name: maven-repo
          path: ..
      - name: Extract Maven Repo
        shell: bash
        run: |
          tar -xzf ../maven-repo.tgz -C ~
      - name: Integration Tests
        id: integration-tests
        env:
          TEST_MODULES: ${{matrix.tests}}
        shell: '/usr/bin/bash {0}'
        run: |
          TEST_FAILURES=()

          for MODULE in ${TEST_MODULES//,/ }; do
            ./mvnw ${MAVEN_ARGS} clean verify \
              -Dformatter.skip -Dimpsort.skip \
              -Pnative,docker \
              -f "${MODULE}/pom.xml"

            if [[ $? -ne 0 ]]; then
              TEST_FAILURES[${#TEST_FAILURES[@]}]=${MODULE}
            fi
          done

          if [[ ${#TEST_FAILURES[@]} -gt 0 ]]; then
            echo -e "\nBuild errors were encountred in the following projects:\n"
            for FAILURE in ${TEST_FAILURES[@]}; do
                echo "* ${FAILURE}"
            done
            echo -e "\nCheck build logs for further information."
            exit 1
          fi
